//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/bgsegm.hpp"
#include <opencv2/highgui.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;

// Global variables





int main(int argc, char* argv[])
{
	//check for the input parameter correctness
	if (argc != 3) 
	{
		std::cerr << "Usage: app.exe <bg_image> <fg_image>" << std::endl;
		std::cerr << "Abort." << std::endl;
		return EXIT_FAILURE;
	}

	const std::string filename_bg = argv[1];
	const std::string filename_fg = argv[2];

	// read the image files in grayscale mode
	cv::Mat frame_bg = cv::imread(filename_bg, CV_LOAD_IMAGE_GRAYSCALE);
	cv::Mat frame_fg = cv::imread(filename_fg, CV_LOAD_IMAGE_GRAYSCALE);

	if (frame_bg.empty() || frame_fg.empty())
	{
		std::cerr << "Image could not be loaded. Abort" << std::endl;
		return EXIT_FAILURE;
	}


	//create Background Subtractor objects. MOG2 approach
	cv::Ptr<cv::BackgroundSubtractor> pMOG = bgsegm::createBackgroundSubtractorMOG();
	cv::Mat mask_mog;	//fg mask fg mask generated by MOG method
	cv::Mat mask_mog2;	//fg mask fg mask generated by MOG2 method
	pMOG->apply(frame_bg, mask_mog);
	pMOG->apply(frame_fg, mask_mog);

	cv::Mat frame_abs_diff;
	cv::absdiff(frame_bg, frame_fg, frame_abs_diff);

	//create GUI windows
	cv::namedWindow("BG", WINDOW_NORMAL | WINDOW_KEEPRATIO);
	cv::namedWindow("FG", WINDOW_NORMAL | WINDOW_KEEPRATIO);
	cv::namedWindow("FG Mask MOG 1", WINDOW_NORMAL | WINDOW_KEEPRATIO);
	cv::namedWindow("FG Abs Diff", WINDOW_NORMAL | WINDOW_KEEPRATIO);

	cv::imshow("BG", frame_bg);
	cv::imshow("FG", frame_fg);
	cv::imshow("FG Mask MOG 1", mask_mog);
	cv::imshow("FG Abs Diff", frame_abs_diff);

	cv::waitKey(0);

	//destroy GUI windows
	cv::destroyAllWindows();

	return EXIT_SUCCESS;
}
